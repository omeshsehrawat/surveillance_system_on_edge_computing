------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
README: Multi-Camera RTSP Streaming with GStreamer
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Overview :->

This Python program streams RTSP feeds from four cameras simultaneously and displays them in a 2x2 grid using GStreamer. Camera details (username, password, IP address) are read from a CSV file, and each stream is positioned within the grid. The program ensures NVIDIA 
hardware-accelerated decoding for optimal performance.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Features:->

    1. Multi-Camera RTSP Streaming:
        Streams up to four RTSP feeds concurrently.
        Displays the streams in a 2x2 grid layout.

    2. CSV Integration:
        Reads camera details (username, password, IP address) from a CSV file.

    3. Error Handling:
        Detects and handles GStreamer errors, such as invalid streams or connection issues.
        Ensures the program stops gracefully on end-of-stream (EOS) events or interruptions.

    4. Efficient Hardware Acceleration:
        Utilizes NVIDIA hardware for decoding and rendering.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Usage Instructions:->

Prepare the CSV File: Create a CSV file named cameras.csv in the same directory. 
The file should have the following format:->

username,password,ip_address
admin,pass123,192.168.1.10
admin,pass123,192.168.1.20
admin,pass123,192.168.1.30
admin,pass123,192.168.1.40

- username: RTSP username for camera authentication.
- password: RTSP password for camera authentication.
- ip_address: IP address of the RTSP camera.

Run the Program:->

Execute the script:

    $ python3 script_name.py

Stream Display:
     - The program will stream feeds from all four cameras in a 2x2 grid.
     - Each stream is placed in one quadrant of the grid.

Stop the Program: 
     - Press Ctrl+C to terminate the program gracefully.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Code Structure:->

1. MultiCameraRTSPPlayer Class:
        - Handles RTSP streaming for four cameras.
        - Constructs a GStreamer pipeline to display the streams in a grid.

2. build_pipeline Method:
        - Dynamically builds the GStreamer pipeline based on the camera details.
        - Configures a 2x2 grid layout using the nvcompositor element.

3. on_message Method:
        - Handles GStreamer bus messages such as errors or end-of-stream events.

4. read_camera_from_csv Function:
        - Reads camera details from a CSV file.
        - Ensures the correct format is used.

5. Main Function:
        - Reads the camera details from the CSV file.
        - Ensures exactly four cameras are provided.
        - Starts the RTSP streams using MultiCameraRTSPPlayer.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Customizations:->

1. Adjust the Number of Cameras:
        - The program is designed for exactly four cameras. To handle a different number, modify the build_pipeline method to adjust the layout and ensure proper validation in the main function.

2. Change Video Decoding Format:
        - The current pipeline supports H.265 streams. 
        - To support other formats (e.g., H.264), modify the pipeline in the build_pipeline method:->

        rtph264depay ! h264parse ! nvv4l2decoder

3. Grid Layout Customization:
        - Adjust the positioning of streams in the build_pipeline method by modifying the xpos, ypos, width, and height parameters.

4. Error Logging:
        - Extend the on_message method to log errors to a file for debugging.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
GStreamer Pipeline:->

    Pipeline Elements:
    
        1. rtspsrc: Reads RTSP streams from the camera.
        2. rtph265depay: Depayloads H.265 RTP packets.
        3. h265parse: Parses the H.265 video stream.
        4. nvv4l2decoder: Decodes the video using NVIDIA hardware acceleration.
        5. videoconvert: Converts video formats for compatibility.
        6. nvcompositor: Composites multiple video streams into a single output.
        7. nv3dsink: Displays the video on the screen.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Error Handling:->

1. CSV File Not Found:
        If the cameras.csv file is missing or unreadable, the program outputs:

        $ Error reading CSV file: [Error details]

2. Incorrect Number of Cameras:

    If the CSV file does not contain exactly four cameras:

    $ Error: The CSV file must contain exactly 4 cameras.

3. RTSP Stream Issues:

    If an RTSP stream fails (e.g., invalid credentials or IP address), an error message is displayed:

    $ Error: [Error message], Debug info: [Debug details]

4. End-of-Stream (EOS):

    If a camera stream ends, the program stops gracefully:

    $ End-of-stream (EOS) received. Shutting down...
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Example Output :->

Starting stream for 4 cameras...
Pipeline: rtspsrc location="rtsp://admin:pass123@192.168.1.10" latency=200 ! rtph265depay ! h265parse ! nvv4l2decoder ! videoconvert ! comp.sink_0 ...
Pipeline started, playing the RTSP streams...

Error: Connection refused, Debug info: [RTSP debug details]
Pipeline stopped and GLib main loop exited.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


