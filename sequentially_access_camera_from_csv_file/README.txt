------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
README: RTSP Player with CSV Integration
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Overview :->


This program streams RTSP feeds from cameras using GStreamer, leveraging camera details provided in a CSV file. The application handles multiple cameras sequentially and uses NVIDIA hardware-accelerated decoding for optimal performance.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Features:->

1. RTSP Streaming:
       - Streams video feeds from RTSP cameras.
       - Supports authentication (username/password) for accessing secured feeds.

2. CSV Integration:
       - Reads camera details (username, password, IP address) from a CSV file.

3. GStreamer Pipeline:
       - Utilizes NVIDIA hardware decoding and rendering.
       - Configured for H.265 streams but can be customized for other formats.

4. Error Handling:
       - Detects and reports pipeline errors and end-of-stream (EOS) events.
       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Requirements:->

1. Python Version: Python 3.6 or higher

2. Libraries:
        - gi (GStreamer Python bindings)
        - csv (for reading camera details from the CSV file)

3. GStreamer Setup

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##################################################################################################################################################################################################################################################################################################
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Usage Instructions:->

1. Clone the Repository:
		$ git clone <repository-url>
		$ cd <repository-directory>

2. Install Dependencies: Ensure Python 3 and GStreamer are installed. If not:
	$ sudo apt update
	$ sudo apt install python3 python3-pip

3. Prepare the CSV File: Create a CSV file named cameras.csv in the same directory. The file should have the following format:

username,password,ip_address
admin,pass123,192.168.1.10
admin,pass123,192.168.1.20
user,pass456,192.168.1.30

Run the Program:->

- Execute the Python script:

    $ python3 <file_name.py>

- Stream RTSP Feeds:
        The program will sequentially connect to each camera listed in the CSV file.
        Streams will display using the nv3dsink element for efficient rendering.

- Stop Streaming: Press Ctrl+C to stop the program.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Code Structure:->

1.RTSPPlayer Class:
       - Handles GStreamer pipeline initialization and management.
       - Handles error and end-of-stream (EOS) events.

2. read_camera_from_csv Function:
       - Reads camera details from a CSV file.
       - Expects columns: username, password, ip_address.

3. Main Function:
       - Reads camera details from cameras.csv.
       - Starts RTSP streaming for each camera sequentially.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Customizations:->

1. Change RTSP Stream Details:
        Update the cameras.csv file with your camera details.

2. Modify GStreamer Pipeline:
        The default pipeline is configured for H.265 streams. 
        To support other formats (e.g., H.264), modify the pipeline_str in the RTSPPlayer class:

        f"rtspsrc location=rtsp://{username}:{password}@{ip_address} ! "
        f"rtph264depay ! h264parse ! nvv4l2decoder ! videoconvert ! nv3dsink"

3. Add Additional Processing:
        Integrate AI or custom video processing by modifying the RTSPPlayer class to handle frame data.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Error Handling:->

1. Missing CSV File:
        If the cameras.csv file is not found, the program will output:
           $ Error reading CSV file: [Error details]

2. Pipeline Errors:
    If the RTSP stream cannot be accessed or if there are issues with the camera, the error will be displayed.
          $ No Cameras Found:

3. If the CSV file is empty or malformed:
     $ No cameras found in the CSV file.
     
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Example Output:->

Starting stream for Camera 1 (192.168.1.10)...
Pipeline: rtspsrc location=rtsp://admin:pass123@192.168.1.10 ! rtph265depay ! h265parse ! nvv4l2decoder ! videoconvert ! nv3dsink
Pipeline started, playing the RTSP stream...

[INFO] End-of-stream (EOS) received. Shutting down...
Pipeline stopped and GLib main loop exited.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
################################################################################################################################################################################################################################################################################################
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

